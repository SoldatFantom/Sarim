October 22, 2024 Soldat Fantom V_1.4 {

Correction added to the function:

cpp

// You must define the total duration of the music here (for example, 240 seconds for a 4-minute track)
total_length = get_mp3_duration(240); // Replace this with the actual music duration

Replace with:

cpp

total_length = get_mp3_duration(file); // Get the real duration time from the audio file using get_mp3_duration(file);

To avoid limiting the audio to only 240 seconds.

}

October 22, 2024 Soldat Fantom V_1.5{

Correction added to the function:

cpp

// You must define the total duration of the music here (for example, 240 seconds for a 4-minute track)
total_length = get_mp3_duration(240); // Replace this with the actual music duration

Replace with:

cpp

total_length = get_audio_duration(file); // Get the real duration time from the audio file using get_audio_duration(file);

Explanation:

In this version, we made two important changes:

    Replacement of get_mp3_duration() with get_audio_duration():
        The original get_mp3_duration() function was limited to MP3 files and required the user to manually define the total length (e.g., 240 seconds for a 4-minute track).
        We replaced it with get_audio_duration(), which dynamically calculates the actual duration of the audio file (MP3, OGG, WAV, etc.) by reading its metadata. This eliminates the need for a fixed duration and allows the program to handle a variety of audio formats.

    Switch from mpg123 to FFmpeg:
        The previous version relied on the mpg123 library, which was specifically designed for MP3 playback. However, this limited the program to only support MP3 files.
        We switched to FFmpeg, a more versatile library that supports a wide range of audio (and video) formats, including MP3, OGG, WAV, and others. This transition allows the program to handle different audio file types seamlessly without needing format-specific functions.

By integrating FFmpeg and the get_audio_duration() function, the program now calculates the real duration of any supported audio file, providing more flexibility and accuracy in playback.
}

October 22, 2024 Soldat Fantom V_1.6 {
Modification made to the audio file search function:

We replaced the use of the `ls` command with `find` to address an issue encountered. The `ls` command failed to correctly list audio files when the specified directory did not contain any subdirectories. As a result, we switched to using `find` to ensure that all audio files are properly located, even in empty directories or those without subfolders.

The new code is as follows:

sprintf(dir_name,"find '%s' -type f -name '*.mp3' -o -name '*.wav' -o -name '*.ogg' >/tmp/tmp.m3u",argv[a]);
system(dir_name);

This approach ensures a comprehensive and robust search for audio files, regardless of the directory structure.
}


December 13, 2024 - Soldat Fantom V_1.7
{
New adjustments to the display logic based on terminal window size:

We introduced dynamic handling of the display based on the terminal window's dimensions (rows and cols). If the terminal window is smaller than 30 rows and 120 columns, we adjust the index values (index_act and index_act_max) to ensure proper display. If the window is larger, we use different index values for optimal display.

getmaxyx(stdscr, rows, cols);

if (rows < 30 && cols < 120) {
    index_act = index_2_count;
    index_act_max = index_2_count_max;
} else {
    index_act = index_count;
    index_act_max = index_count_max;
}

This change allows the program to adjust the display depending on the terminal's size, ensuring proper visibility of items without truncation.
Index adjustment based on the selected item:

The logic now automatically adjusts the range of displayed items when the selected item (current) is outside the current visible range (index_act to index_act_max). If the selected item is out of range, the program scrolls the list to make it visible.

if (current < index_act + 1) {
    if (index_act != 0) {
        index_count_max = index_count_max - 40;
        index_2_count_max = index_2_count_max - 20;
        index_2_count = index_2_count - 20;
        index_count = index_count - 40;
    }
}

if (current > index_act_max) {
    index_count_max = index_count_max + 40;
    index_count = index_count + 40;
    index_2_count_max = index_2_count_max + 20;
    index_2_count = index_2_count + 20;
}

This ensures the selected item is always visible by shifting the list dynamically when needed.
Added the clear_input_buffer() function:
We added a call to clear_input_buffer() in the handle_input() function to clear the input buffer of ncurses after each key press is processed. This ensures that no incorrect or leftover inputs are read from previous events.

void clear_input_buffer() {
    // Clear the input buffer by calling `getch()` until it's empty
    while (getch() != ERR) {}
}


}
Soldat Fantom V_1.8 - December 14, 2024
{
    Added shuffle mode.
    Fixed bugs related to handling relative paths passed as arguments.

Below is the updated and improved code:
Code: Randomized File Shuffle and Path Expansion in C

This program manages a randomized shuffle mechanism for files and includes functionality to handle paths that use ~ for the home directory. It ensures each random number drawn is unique until all possibilities are exhausted, at which point it resets. It also correctly expands paths starting with ~.

#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stdbool.h>
#include <curses.h>

#define MAX_FILE_COUNT 1000 // Define the maximum number of files

static int available_count = 0;   // Number of available indices
static int file_count_global = 0; // Total number of files (for tracking)
static int drawn_numbers[MAX_FILE_COUNT]; // Array to store already drawn numbers
static int drawn_count = 0;               // Counter for drawn numbers

// Clears the input buffer
void clear_input_buffer() {
    // Consume all characters from the buffer until it's empty
    while (getch() != ERR) {}
}

// Initializes or resets the array of drawn numbers
void reset_drawn_numbers(int file_count) {
    if (file_count <= 0 || file_count > MAX_FILE_COUNT) {
        fprintf(stderr, "Error: file_count must be between 1 and %d.\n", MAX_FILE_COUNT);
        exit(EXIT_FAILURE);
    }

    file_count_global = file_count; // Update the total number of files
    drawn_count = 0;                // Reset the drawn numbers counter

    // Reset the array storing drawn numbers
    for (int i = 0; i < file_count_global; i++) {
        drawn_numbers[i] = -1; // Initialize with an impossible value
    }

    printf("Cycle reset for %d files.\n", file_count_global);
}

// Checks if a number has already been drawn
bool is_number_drawn(int number) {
    for (int i = 0; i < drawn_count; i++) {
        if (drawn_numbers[i] == number) {
            return true; // Number has already been drawn
        }
    }
    return false;
}

// Draws a unique random number
int get_unique_random_number() {
    if (file_count_global == 0) {
        fprintf(stderr, "Error: file_count_global is uninitialized. Call reset_drawn_numbers() first.\n");
        exit(EXIT_FAILURE);
    }

    if (drawn_count >= file_count_global) {
        // All numbers have been drawn, automatically reset
        reset_drawn_numbers(file_count_global);
    }

    int random_number;

    // Loop until a non-drawn number is found
    do {
        random_number = rand() % file_count_global;
    } while (is_number_drawn(random_number));

    // Add the drawn number to the array
    drawn_numbers[drawn_count++] = random_number;

    return random_number;
}

// Expands paths starting with '~' to the user's home directory
char* expand_tilde(const char* path) {
    if (path[0] == '~') {
        // Retrieve the current user's home directory
        const char* home = getenv("HOME");
        if (!home) {
            fprintf(stderr, "Error: Unable to determine the home directory.\n");
            return NULL;
        }

        // Allocate memory for the expanded path
        size_t home_len = strlen(home);
        size_t path_len = strlen(path);
        char* full_path = malloc(home_len + path_len); // +path_len already accounts for the removed '~'
        if (!full_path) {
            fprintf(stderr, "Error: Memory allocation failed.\n");
            return NULL;
        }

        // Build the expanded path
        strcpy(full_path, home);
        strcat(full_path, path + 1); // Skip the '~'

        return full_path;
    }

    // If the path does not start with '~', return a copy of the original path
    return strdup(path);
}

Explanation and Context

    Shuffle Mode:
        The shuffle mode ensures that numbers are drawn randomly without repetition.
        Once all numbers have been drawn, the list resets automatically for a new cycle.

    Path Handling with ~:
        The function expand_tilde resolves paths that start with ~ (e.g., ~/Music/song.mp3) to the user's home directory (/home/username/Music/song.mp3).
        This is important because the ~ shortcut is not automatically expanded in C programs unless explicitly handled.

    Improvements Added:
        Better error handling for invalid file_count values and uninitialized states.
        Memory allocation checks to avoid potential crashes.

    Usage:
        The reset_drawn_numbers() function should be called with the total number of files to initialize the randomization logic.
        Call get_unique_random_number() to get a new random number that has not been drawn yet.
        The expand_tilde() function ensures paths with ~ are correctly expanded before being used.




}
