October 22, 2024 Soldat Fantom V_1.4 {

Correction added to the function:

cpp

// You must define the total duration of the music here (for example, 240 seconds for a 4-minute track)
total_length = get_mp3_duration(240); // Replace this with the actual music duration

Replace with:

cpp

total_length = get_mp3_duration(file); // Get the real duration time from the audio file using get_mp3_duration(file);

To avoid limiting the audio to only 240 seconds.

}

October 22, 2024 Soldat Fantom V_1.5{

Correction added to the function:

cpp

// You must define the total duration of the music here (for example, 240 seconds for a 4-minute track)
total_length = get_mp3_duration(240); // Replace this with the actual music duration

Replace with:

cpp

total_length = get_audio_duration(file); // Get the real duration time from the audio file using get_audio_duration(file);

Explanation:

In this version, we made two important changes:

    Replacement of get_mp3_duration() with get_audio_duration():
        The original get_mp3_duration() function was limited to MP3 files and required the user to manually define the total length (e.g., 240 seconds for a 4-minute track).
        We replaced it with get_audio_duration(), which dynamically calculates the actual duration of the audio file (MP3, OGG, WAV, etc.) by reading its metadata. This eliminates the need for a fixed duration and allows the program to handle a variety of audio formats.

    Switch from mpg123 to FFmpeg:
        The previous version relied on the mpg123 library, which was specifically designed for MP3 playback. However, this limited the program to only support MP3 files.
        We switched to FFmpeg, a more versatile library that supports a wide range of audio (and video) formats, including MP3, OGG, WAV, and others. This transition allows the program to handle different audio file types seamlessly without needing format-specific functions.

By integrating FFmpeg and the get_audio_duration() function, the program now calculates the real duration of any supported audio file, providing more flexibility and accuracy in playback.
}

October 22, 2024 Soldat Fantom V_1.6 {
Modification made to the audio file search function:

We replaced the use of the `ls` command with `find` to address an issue encountered. The `ls` command failed to correctly list audio files when the specified directory did not contain any subdirectories. As a result, we switched to using `find` to ensure that all audio files are properly located, even in empty directories or those without subfolders.

The new code is as follows:

sprintf(dir_name,"find '%s' -type f -name '*.mp3' -o -name '*.wav' -o -name '*.ogg' >/tmp/tmp.m3u",argv[a]);
system(dir_name);

This approach ensures a comprehensive and robust search for audio files, regardless of the directory structure.
}

December 13, 2024 - Soldat Fantom V_1.7
{
New adjustments to the display logic based on terminal window size:

We introduced dynamic handling of the display based on the terminal window's dimensions (rows and cols). If the terminal window is smaller than 30 rows and 120 columns, we adjust the index values (index_act and index_act_max) to ensure proper display. If the window is larger, we use different index values for optimal display.

getmaxyx(stdscr, rows, cols);

if (rows < 30 && cols < 120) {
    index_act = index_2_count;
    index_act_max = index_2_count_max;
} else {
    index_act = index_count;
    index_act_max = index_count_max;
}

This change allows the program to adjust the display depending on the terminal's size, ensuring proper visibility of items without truncation.
Index adjustment based on the selected item:

The logic now automatically adjusts the range of displayed items when the selected item (current) is outside the current visible range (index_act to index_act_max). If the selected item is out of range, the program scrolls the list to make it visible.

if (current < index_act + 1) {
    if (index_act != 0) {
        index_count_max = index_count_max - 40;
        index_2_count_max = index_2_count_max - 20;
        index_2_count = index_2_count - 20;
        index_count = index_count - 40;
    }
}

if (current > index_act_max) {
    index_count_max = index_count_max + 40;
    index_count = index_count + 40;
    index_2_count_max = index_2_count_max + 20;
    index_2_count = index_2_count + 20;
}

This ensures the selected item is always visible by shifting the list dynamically when needed.
}
